#!/usr/bin/env ruby

# Reads the bundles you want installed out of your $HOME/.vimrc file,
# then synchronizes .vim/bundles to match, downloading new repositories
# as needed.  It also deletes bundles that are no longer used.
#
# To specify a bundle in your .vimrc, just add a line like this:
#   " BUNDLE: git://git.wincent.com/command-t.git
# If you want a branch other than 'master', add the branch name on the end:
#   " BUNDLE: git://github.com/vim-ruby/vim-ruby.git noisy
# Or tag or sha1: (this results in a detached head, see 'git help checkout')
#   " BUNDLE: git://github.com/bronson/vim-closebuffer.git 0.2
#   " BUNDLE: git://github.com/tpope/vim-rails.git 42bb0699

require 'fileutils'
require 'open-uri'

# todo: what happens when i change a repo but the dirname stays the same?
#       i.e. github.com/wincent/command-t to github.com/kain/command-t
#       answer: nothing.  it just pulls from the old repo.
# todo: not a fan of " BUNDLE:", hoping someone suggests something better.
# todo: if no .vim dir, then create one.  if pathogen isn't installed, install it.
# todo: make a way to execute shell commands after a plugin is downloaded?
#   i.e. run 'which rvm >/dev/null 2>&1 && rvm use system; rake make' in command-t
# todo: add --no-update which will only add/delete bundles, not update them?


def print_bundle(dir, doc)
  version = date = ''
  FileUtils.cd(dir) do
    version = `git describe --tags 2>/dev/null`.chomp
    version = "n/a" if version == ''
    date = `git log -1 --pretty=format:%ai`.chomp
  end
  doc.printf "  - %-30s %-22s %s\n", "|#{dir}|", version, date.split(' ').first
end


def download(dir, url, tag, doc)
  tagstr = " at #{tag}" if tag
  if test ?d, dir
    puts "updating #{dir} from #{url}#{tagstr}"
    FileUtils.cd(dir) { `git fetch` }
  else
    puts "cloning #{dir} from #{url}#{tagstr}"
    `git clone -q #{url} #{dir}`
  end

  FileUtils.cd(dir) { `git checkout -q #{tag || 'master'}` }
  print_bundle(dir, doc)
end


def read_vimrc
  bundles = []
  File.open("#{ENV['HOME']}/.vimrc") do |file|
    file.each_line do |line|
      bundles.push $1 if line =~ /^\s*"\s*BUNDLE:\s*(.*)$/
    end
  end
  bundles
end


def remove_bundle(dir)
  trash_dir = "#{ENV['HOME']}/.vim/Trashed-Bundles"
  Dir.mkdir trash_dir unless test ?d, trash_dir
  puts "Erasing #{dir}, find it in #{trash_dir}"
  FileUtils.mv(dir, trash_dir)
end


def update_bundles(doc)
  existing_bundles = Dir['*']
  vimrc_bundles = read_vimrc

  vimrc_bundles.each do |line|
    url, tag = line.split
    dir = url.split('/').last.gsub(/^vim-|\.git$/, '').gsub(/\.vim$/, '')
    download(dir, url, tag, doc)
    existing_bundles.delete(dir)
  end

  existing_bundles.each { |dir| remove_bundle(dir) }
end


def create_new_vim_environment
  puts 'Creating a new Vim environment'

  Dir.mkdir  "#{ENV['HOME']}/.vim"
  File.open("#{ENV['HOME']}/.vim/vimrc", 'w') { |f| f.write <<EOL
" Don't use abbreviations!  Spelling things out makes grepping easy.

" Load plugins using Pathogen. Don't worry if this bit doesn't make sense.
filetype off
call pathogen#runtime_append_all_bundles()
filetype indent plugin on
syntax on
set nocompatible


" That's all you need for a working Vim setup.
" Enable any of the following plugins by deleting the #
" and add some of your own!

" Generally Useful:
" # BUNDLE: git://github.com/scrooloose/nerdtree.git
" # BUNDLE: git://github.com/bronson/vim-bufexplorer.git
" # BUNDLE: git://github.com/bronson/Command-T.git
" # BUNDLE: git://github.com/bronson/vim-closebuffer.git
" # BUNDLE: git://github.com/bronson/vim-indexedsearch.git
" # BUNDLE: git://github.com/bronson/vim-scrollcolors.git
" # BUNDLE: git://github.com/bronson/vim-visual-star-search.git
" # BUNDLE: git://github.com/bronson/vim-trailing-whitespace.git
" # BUNDLE: git://github.com/bronson/vim-toggle-wrap.git
" # BUNDLE: git://github.com/Raimondi/YAIFA.git
" # BUNDLE: git://github.com/tpope/vim-vividchalk.git

" Programming:
" # BUNDLE: git://github.com/scrooloose/nerdcommenter.git
" # BUNDLE: git://github.com/tpope/vim-surround.git
" # BUNDLE: git://github.com/vim-scripts/taglist.vim
" # BUNDLE: git://github.com/msanders/snipmate.vim.git
" # BUNDLE: git://github.com/scrooloose/snipmate-snippets.git
" # BUNDLE: git://github.com/tsaleh/vim-align.git
" # BUNDLE: git://github.com/tpope/vim-endwise.git
" # BUNDLE: git://github.com/tpope/vim-repeat.git
" # BUNDLE: git://github.com/tpope/vim-fugitive.git
" # BUNDLE: git://github.com/tsaleh/vim-supertab.git
" # BUNDLE: git://github.com/bronson/vim-jquery.git
" # BUNDLE: git://github.com/tpope/vim-git.git
" # BUNDLE: git://github.com/tpope/vim-markdown.git
" # BUNDLE: git://github.com/timcharper/textile.vim.git
" # BUNDLE: git://github.com/kchmck/vim-coffee-script.git

" Ruby/Rails Programming:
" # BUNDLE: git://github.com/vim-ruby/vim-ruby.git
" # BUNDLE: git://github.com/tpope/vim-rails.git
" # BUNDLE: git://github.com/tpope/vim-rake.git
" # BUNDLE: git://github.com/bronson/vim-ruby-block-conv.git
" # BUNDLE: git://github.com/janx/vim-rubytest.git
" # BUNDLE: git://github.com/tsaleh/vim-shoulda.git
" # BUNDLE: git://github.com/tpope/vim-cucumber.git
" # BUNDLE: git://github.com/tpope/vim-haml.git
" # BUNDLE: git://github.com/astashov/vim-ruby-debugger.git

EOL
  }

  Dir.mkdir "#{ENV['HOME']}/.vim/autoload" unless test ?d, "#{ENV['HOME']}/.vim/autoload"
  open("http://github.com/tpope/vim-pathogen/raw/master/autoload/pathogen.vim") do |r|
    File.open("#{ENV['HOME']}/.vim/autoload/pathogen.vim", 'w') { |w| w.write(r.read) }
  end

  `ln -s '#{ENV['HOME']}/.vim/vimrc' '#{ENV['HOME']}/.vimrc'`

  puts 'Done!  Now edit your ~/.vimrc file.'
end


create_new_vim_environment unless test ?d, "#{ENV['HOME']}/.vim"

doc_dir = "#{ENV['HOME']}/.vim/doc"
Dir.mkdir doc_dir unless test ?d, doc_dir
File.open("#{ENV['HOME']}/.vim/doc/bundles.txt", "w") do |doc|
  doc.printf "%-32s %s %32s\n\n", "*bundles.txt*", "Bundles", "Version 0.1"
  doc.puts "These are the bundles installed on your system, along with their\n" +
    "versions and release dates.  Downloaded on #{Time.now}.\n\n" +
    "A version number of 'n/a' means upstream hasn't tagged any releases.\n"

  bundle_dir = "#{ENV['HOME']}/.vim/bundle"
  Dir.mkdir bundle_dir unless test ?d, bundle_dir
  FileUtils.cd(bundle_dir)
  update_bundles(doc)

  doc.puts "\n"
end

puts "updating helptags..."
`vim -e -c "call pathogen#helptags()" -c q`
puts "done!  Start Vim and type ':help bundles' to see what you have installed."

