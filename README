

                      vim-update-bundles


Use Pathogen and Git to manage your Vim plugins.


DESCRIPTION

This script reads the plugins to install from your .vimrc, then installs them.
For example, add this line to your .vimrc and run vim-update-bundles:

    " Bundle: git://github.com/scrooloose/nerdtree.git

You will find NERDtree installed and ready to run, complete with helptags.


USAGE

  $ wget http://github.com/bronson/vim-update-bundles/raw/master/vim-update-bundles
  $ ruby vim-update-bundles

This will create a new environment if you're not already using vim.  You can also
clone the git repo and run vim-update-bundles from there if that's easier.

Now open your ~/.vimrc, enable a few plugins, and run vim-update-bundles again to
apply the changes.

  $ ruby vim-update-bundles

  :help bundles       <- run inside vim to see the plugins you have installed.

vim-update-bundles will use ~/.dotfiles if it exists so it works seamlessly
with http://github.com/ryanb/dotfiles and friends.  It also supports git
submodules (see CONFIGURATION below).


VIMRC

Any line of the format '" Bundle: URL [REV]' (not case sensitive) will be
interpreted as a bundle to download.  URL is to a git repository, and REV is an
optional refspec (git branch, tag, or sha1) that allows you to follow a branch
or lock it to a specific version:

    " Bundle: git://github.com/scrooloose/nerdtree.git 4.0.0

To update to 4.0.1, change your vimrc and re-run vim-update-bundles.

You can put any number of Bundle-Command: directives after Bundle.
Bundle-command executes the given shell commands within the bundle's directory.
For instance, to call "rake make" every time Command-T is updated:

    " Bundle: git://github.com/bronson/Command-T.git
    " Bundle-Command: rake make

Finally, if you have directories in ~/.vim/bundle that you'd like to be ignored,
just mark them as static.

     " Static: myplugin


CONFIGURATION

Run vim-update-bundles --verbose to see exactly what's happening.

To install your bundles as submodules rather than plain git repos, put
"submodule = 1" in ~/.vim-update-bundles.conf.  Of course, you must create the
parent repo to contain the submodules before running vim-update-bundles.

If you put your ~/.vim directory or ~/.vimrc file in a custom location, you can
configure that ~/.vim-update-bundles.conf:

  dotvim = $HOME/mydotfiles/vim
  dotvimrc = $HOME/mydotfiles/vim/vimrc

You can also change where pathogen.vim and the .vimrc template are downloaded
from (these are only used when setting up a new vim environment).

  starter_url  = /tmp/local-vimrc-template
  pathogen_url = http://example.con/my-pathogen.vim


Q&A

Q: How do I install a plugin?
A: Add a line like this to your ~/.vimrc and then run git-update-bundles.
     " Bundle: git://github.com/bronson/vim-closebuffer.git

Q: How do I remove a plugin?
A: Delete the line entirely or comment it out by inserting text before it.
     " # Bundle: git://github.com/bronson/vim-closebuffer.git

Q: How do I change a plugin?
A: Change its URL in your .vimrc. vim-update-bundles will do the right thing.


ALTERNATIVES

See http://vim-scripts.org/tools.html

